{1,
{2,
{"Code Template ",1,0,"",""},
{0,
{"Комментарий",0,0,"комм","//Ермаков <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> #НомерЗадачи
//Ермаков <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> #НомерЗадачи"}
},
{6,
{"Web-сервисы",1,0,"",""},
{0,
{"Вызов",0,0,"","
Определения = Новый WSОпределения(АдресВебСервиса + ""?wsdl"");

// Тип берем именно через Определения, это нужно просто знать
СкладТип = Определения.ФабрикаXDTO.Тип(""http://www.1c-uc3.ru"", ""Склад"");
Склад = ФабрикаXDTO.Создать(СкладТип);

Прокси = Новый WSПрокси(Определения, ""http://www.1c-uc3.ru"", 
	""Тест"", ""ТестSoap"");

Склад.Наименование = ""ТестовыйСклад"";
Склад.МОЛ = ""Ермаков Виктор Викторович"";
Склад.ТипСклада = ""Розничный"";

// Вызов функции Web-сервиса
СкладСоздан = Прокси.СоздатьСклад(Склад);"}
},
{0,
{"Json_ЗаписьЧтение_РучнаяСериализация",0,0,"","
#Область Запись

Процедура ЗаписьJsonСРучнойСериализацией()
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	
	// Указываем как будет записана дата.
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.JavaScript;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	
	Запись = Новый ЗаписьJSON;
	Путь = Константы.ПутьДоФайлов.Получить()+""\"";
	Запись.ОткрытьФайл(Путь + ""js.json"");
	
	Стр = Новый Структура(
		""Код, Наименование, ПолноеНаименование"",
		Контрагент.Код, Контрагент.Наименование, Контрагент.ПолноеНаименование());
	
	Массив = Новый Массив;
	Для Каждого ТекСтрока Из Контрагент.Контакты Цикл
		
		СтрКЛ = Новый Структура(""КЛ, Телефон"", """", """");
		СтрКЛ.Кл = ТекСтрока.КонтактноеЛицо;
		СтрКЛ.Телефон = ТекСтрока.Телефон;
		
		Массив.Добавить(СтрКЛ);
		
	КонецЦикла;
	
	Стр.Вставить(""Массив"",Массив);
	Стр.Вставить(""ДатаСведений"",ТекущаяДата());
	Стр.Вставить(""UUID"",Контрагент.УникальныйИдентификатор());
	
	ЗаписатьJSON(Запись, Стр, НастройкиСериализации, ""СериализацияЗначений"", ЭтаФорма);
	Запись.Закрыть();
	
КонецПроцедуры

// Сериализует реквизиты не допустимых типов.
Функция СериализацияЗначений(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип(""УникальныйИдентификатор"") Тогда
		Возврат Строка(Значение);
	КонецЕсли;
	
	// Не делаем сериализуцию для других типов.
	Отказ = Истина;
	
КонецФункции

#КонецОбласти

#Область Чтение

Процедура Загрузка()
	
	Чтение = Новый ЧтениеJSON;
	Путь = Константы.ПутьДоФайлов.Получить()+""\"";
	Чтение.ОткрытьФайл(Путь+""js.json"");
	
	// Указываем в массиве только те реквизиты, которые нужно преобразовать, для исключения лишних вызовов.
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(""ДатаСведений"");
	Реквизиты.Добавить(""UUID"");
	
	Данные = ПрочитатьJSON(Чтение, Ложь,,, ""ФункцияВосстановленияЧтения"", ЭтаФорма,, Реквизиты);
	Чтение.Закрыть();
	
КонецПроцедуры

// Обратная сериализация типов при чтении.
Функция ФункцияВосстановленияЧтения(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если Свойство = ""ДатаСведений"" Тогда
		Возврат ПрочитатьДатуJSON(Формат(Значение, ""ЧГ=""), ФорматДатыJSON.JavaScript);
	КонецЕсли;
	
	Если Свойство = ""UUID"" Тогда
		Возврат Новый УникальныйИдентификатор(Значение);
	КонецЕсли;
	
КонецФункции

#КонецОбласти"}
},
{0,
{"Json_ЗаписьЧтение_АвтоСериализация",0,0,"","#Область Запись

Процедура ЗаписьJsonСАвтоСериализацией()
	
	Запись = Новый ЗаписьJSON;
	Путь= Константы.ПутьДоФайлов.Получить() + ""\"";
	Запись.ОткрытьФайл(Путь + ""js.json"");
	
	// Используется если тип мы не хотим явно задавать в выгрузке, и он будет определен при загрузке.
	//СериализаторXDTO.ЗаписатьJSON(Запись, Контрагент.ПолучитьОбъект());
	
	СериализаторXDTO.ЗаписатьJSON(Запись, Контрагент.ПолучитьОбъект(), НазначениеТипаXML.Явное);
	
	Запись.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область Загрузка

Процедура Загрузка()
	
	Чтение = Новый ЧтениеJSON;
	Путь= Константы.ПутьДоФайлов.Получить()+ ""\"";
	Чтение.ОткрытьФайл(Путь + ""js.json"");
	
	// Используется если при выгрузке не был указан явно тип объекта выгружаемого.
	//Данные = СериализаторXDTO.ПрочитатьJSON(Чтение, Тип(""СправочникОбъект.Контрагенты""));
	
	Данные = СериализаторXDTO.ПрочитатьJSON(Чтение);
	
	Чтение.Закрыть();
	
КонецПроцедуры

#КонецОбласти"}
},
{0,
{"Json_ПотоковаяЗаписьЧтение",0,0,"","
Процедура КнопкаВыполнитьНажатие()
	
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "" "", Истина);
	Запись = Новый ЗаписьJSON;
	
	Путь= Константы.ПутьДоФайлов.Получить() + ""\"";
	Запись.ОткрытьФайл(Путь + ""js.json"",,, ПараметрыJSON);
	
	Запись.ЗаписатьНачалоОбъекта();
	Запись.ЗаписатьИмяСвойства(""СвойствоОбъекта1"");
	Запись.ЗаписатьЗначение(""Значение1"");
	Запись.ЗаписатьИмяСвойства(""СвойствоОбъекта2"");
	Запись.ЗаписатьНачалоОбъекта();
	Запись.ЗаписатьИмяСвойства(""СвойствоВложенногоОбъекта1"");
	Запись.ЗаписатьЗначение(""Зн СВО1"");
	Запись.ЗаписатьИмяСвойства(""СвойствоВложенногоОбъекта2"");
	Запись.ЗаписатьЗначение(""Зн СВО2"");
	Запись.ЗаписатьКонецОбъекта();
	Запись.ЗаписатьИмяСвойства(""Массив"");
	Запись.ЗаписатьНачалоМассива();
	Запись.ЗаписатьЗначение(3.141592654, Истина);
	Запись.ЗаписатьЗначение(2.718281828, Ложь);
	Запись.ЗаписатьКонецМассива();
	Запись.ЗаписатьКонецОбъекта();
	Запись.Закрыть();
	
КонецПроцедуры

Процедура ПотоковоеЧтение()
	
	Чтение = Новый ЧтениеJSON;
	
	Путь= Константы.ПутьДоФайлов.Получить() + ""\"";
	Чтение.ОткрытьФайл(Путь + ""js.json"");
	
	Пока Чтение.Прочитать() Цикл
		
		Сообщить(""Тип текущего элемента "" + Чтение.ТипТекущегоЗначения);
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			Сообщить(""Имя = "" + Чтение.ТекущееЗначение);
		КонецЕсли;
		
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Или
			Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Или 
			Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.Число Или 
			Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.Комментарий Тогда
			Сообщить(""Значение = "" + Чтение.ТекущееЗначение);
		КонецЕсли;
		
	КонецЦикла;
	
	Чтение.Закрыть();
	
КонецПроцедуры

Процедура СовмещениеТехник()
	
	Перем КогдаСформировано,СписокЗаказов;
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДат = ФорматДатыJSON.ISO;
	НастройкиСериализации.СериализовыватьМассивыКакОбъекты = Истина;
	
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "" "", Истина);
	
	Запись = Новый ЗаписьJSON;
	Запись.ПроверятьСтруктуру = Истина;
	Запись.ОткрытьФайл(""c:\temp\combinedWrite.json"", , , ПараметрыJSON);
	
	Запись.ЗаписатьНачалоОбъекта();
	Запись.ЗаписатьИмяСвойства(""ДатаФормирования"");
	Запись.ЗаписатьЗначение(ЗаписатьДатуJSON(КогдаСформировано, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата));
	Запись.ЗаписатьИмяСвойства(""Заказы"");
	
	Заказы = Новый Массив;
	Для Каждого Заказ Из СписокЗаказов Цикл
		
		ОписаниеЗаказа = Новый Структура(""Ссылка, Номер, Дата, Контрагент"");
		ОписаниеЗаказа.Ссылка = Строка(Заказ.Ссылка);
		ОписаниеЗаказа.Номер = Заказ.Номер;
		ОписаниеЗаказа.Дата = Заказ.Дата;
		ОписаниеЗаказа.Контрагент = Строка(Заказ.Контрагент);
		Заказы.Добавить(ОписаниеЗаказа);
		
	КонецЦикла;
	
	ЗаписатьJSON(Запись, Заказы, НастройкиСериализации);
	Запись.ЗаписатьКонецОбъекта();
	Запись.Закрыть();
	
КонецПроцедуры
"}
},
{0,
{"HTTPЗапрос",0,0,"","
	//Путь= Константы.ПутьДоКаталога.Получить()+ ""\"";
	СерверИсточник = ""localhost"";
	Адрес = """";//index.html
	//ИмяВходящегоФайла = Путь + ""input.html"";
	
	HTTPЗапрос = Новый HTTPЗапрос(Адрес);
	
	//НТТР = Новый HTTPСоединение(СерверИсточник);
	//НТТР.Получить(HTTPЗапрос, ИмяВходящегоФайла);
	//ПолеHTML = ИмяВходящегоФайла;
	
	НТТР = Новый HTTPСоединение(СерверИсточник);
	НТТРОтвет = НТТР.Получить(HTTPЗапрос);
	
	Если НТТРОтвет.КодСостояния = 200 Тогда
	
		ПолеHTML = НТТРОтвет.ПолучитьТелоКакСтроку();
		
	КонецЕсли;"}
},
{0,
{"HTTP-сервисы",0,0,"","Функция ПараметризированныйСегментGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить(""Content-type"", ""application/json; charset = utf-8"");
	Ответ.УстановитьТелоИзСтроки(""/{Параметр1}"");
	
	Возврат Ответ;
	
КонецФункции

Функция ФиксированныйВсеGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить(""Content-type"", ""application/json; charset = utf-8"");
	Ответ.УстановитьТелоИзСтроки(""/static/*"");
	
	Возврат Ответ;
	
КонецФункции

Функция ПараметризированныйПараметризированныйGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить(""Content-type"", ""application/json; charset = utf-8"");
	Ответ.УстановитьТелоИзСтроки(""/{Парам1}/{Парам2}"");
	
	Возврат Ответ;
	
КонецФункции
"}
}
}
}
}